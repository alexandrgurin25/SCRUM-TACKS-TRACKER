// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ptrvpolyna\GolandProjects\projects\internal\repository\repository.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\ptrvpolyna\GolandProjects\projects\internal\repository\repository.go -destination=repository/mocks/repo_mock .go -package=mocks
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	models "projects/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProjects is a mock of Projects interface.
type MockProjects struct {
	ctrl     *gomock.Controller
	recorder *MockProjectsMockRecorder
	isgomock struct{}
}

// MockProjectsMockRecorder is the mock recorder for MockProjects.
type MockProjectsMockRecorder struct {
	mock *MockProjects
}

// NewMockProjects creates a new mock instance.
func NewMockProjects(ctrl *gomock.Controller) *MockProjects {
	mock := &MockProjects{ctrl: ctrl}
	mock.recorder = &MockProjectsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjects) EXPECT() *MockProjectsMockRecorder {
	return m.recorder
}

// AddParticipant mocks base method.
func (m *MockProjects) AddParticipant(ctx context.Context, projectId, participantEmail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddParticipant", ctx, projectId, participantEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddParticipant indicates an expected call of AddParticipant.
func (mr *MockProjectsMockRecorder) AddParticipant(ctx, projectId, participantEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddParticipant", reflect.TypeOf((*MockProjects)(nil).AddParticipant), ctx, projectId, participantEmail)
}

// DeleteProject mocks base method.
func (m *MockProjects) DeleteProject(ctx context.Context, id, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", ctx, id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectsMockRecorder) DeleteProject(ctx, id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjects)(nil).DeleteProject), ctx, id, userID)
}

// GetProject mocks base method.
func (m *MockProjects) GetProject(ctx context.Context, id string) (*models.Project, *models.ParticipantsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", ctx, id)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(*models.ParticipantsList)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProject indicates an expected call of GetProject.
func (mr *MockProjectsMockRecorder) GetProject(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockProjects)(nil).GetProject), ctx, id)
}

// SaveProject mocks base method.
func (m *MockProjects) SaveProject(ctx context.Context, id, authorID, description, title string) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProject", ctx, id, authorID, description, title)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveProject indicates an expected call of SaveProject.
func (mr *MockProjectsMockRecorder) SaveProject(ctx, id, authorID, description, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProject", reflect.TypeOf((*MockProjects)(nil).SaveProject), ctx, id, authorID, description, title)
}
