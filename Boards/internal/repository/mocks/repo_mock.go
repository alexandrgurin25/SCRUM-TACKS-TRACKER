// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ptrvpolyna\GolandProjects\boards\internal\repository\repository.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\ptrvpolyna\GolandProjects\boards\internal\repository\repository.go -destination=repository/mocks/repo_mock .go -package=mocks
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "boards/internal/models"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBoards is a mock of Boards interface.
type MockBoards struct {
	ctrl     *gomock.Controller
	recorder *MockBoardsMockRecorder
	isgomock struct{}
}

// MockBoardsMockRecorder is the mock recorder for MockBoards.
type MockBoardsMockRecorder struct {
	mock *MockBoards
}

// NewMockBoards creates a new mock instance.
func NewMockBoards(ctrl *gomock.Controller) *MockBoards {
	mock := &MockBoards{ctrl: ctrl}
	mock.recorder = &MockBoardsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBoards) EXPECT() *MockBoardsMockRecorder {
	return m.recorder
}

// GetAllBoards mocks base method.
func (m *MockBoards) GetAllBoards(ctx context.Context, projectID string) (*models.BoardsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBoards", ctx, projectID)
	ret0, _ := ret[0].(*models.BoardsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBoards indicates an expected call of GetAllBoards.
func (mr *MockBoardsMockRecorder) GetAllBoards(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBoards", reflect.TypeOf((*MockBoards)(nil).GetAllBoards), ctx, projectID)
}

// GetBoard mocks base method.
func (m *MockBoards) GetBoard(ctx context.Context, id string) (*models.Board, *models.TasksList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoard", ctx, id)
	ret0, _ := ret[0].(*models.Board)
	ret1, _ := ret[1].(*models.TasksList)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBoard indicates an expected call of GetBoard.
func (mr *MockBoardsMockRecorder) GetBoard(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoard", reflect.TypeOf((*MockBoards)(nil).GetBoard), ctx, id)
}

// SaveBoard mocks base method.
func (m *MockBoards) SaveBoard(ctx context.Context, id, authorID, projectID, title string) (*models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBoard", ctx, id, authorID, projectID, title)
	ret0, _ := ret[0].(*models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBoard indicates an expected call of SaveBoard.
func (mr *MockBoardsMockRecorder) SaveBoard(ctx, id, authorID, projectID, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBoard", reflect.TypeOf((*MockBoards)(nil).SaveBoard), ctx, id, authorID, projectID, title)
}
